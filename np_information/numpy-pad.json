{
    "overall": {
        "api_name": "pad",
        "description": "Pad an array."
    },
    "parameter": {
        "array": {
            "type": "array_like of rank N",
            "description": "The array to pad. "
        },
        "pad_width": {
            "type": "{sequence, array_like, int}",
            "description": "Number of values padded to the edges of each axis. ((before_1, after_1), \u2026 (before_N, after_N)) unique pad widths for each axis. ((before, after),) yields same before and after pad for each axis. (pad,) or int is a shortcut for before = after = pad width for all axes. "
        },
        "mode": {
            "type": "str or function, optional",
            "description": "One of the following string values or a user supplied function.  \u2018constant\u2019 (default)Pads with a constant value.  \u2018edge\u2019Pads with the edge values of array.  \u2018linear_ramp\u2019Pads with the linear ramp between end_value and the array edge value.  \u2018maximum\u2019Pads with the maximum value of all or part of the vector along each axis.  \u2018mean\u2019Pads with the mean value of all or part of the vector along each axis.  \u2018median\u2019Pads with the median value of all or part of the vector along each axis.  \u2018minimum\u2019Pads with the minimum value of all or part of the vector along each axis.  \u2018reflect\u2019Pads with the reflection of the vector mirrored on the first and last values of the vector along each axis.  \u2018symmetric\u2019Pads with the reflection of the vector mirrored along the edge of the array.  \u2018wrap\u2019Pads with the wrap of the vector along the axis. The first values are used to pad the end and the end values are used to pad the beginning.  \u2018empty\u2019Pads with undefined values.  New in version 1.17.   &lt;function&gt;Padding function, see Notes.   "
        },
        "stat_length": {
            "type": "sequence or int, optional",
            "description": "Used in \u2018maximum\u2019, \u2018mean\u2019, \u2018median\u2019, and \u2018minimum\u2019.  Number of values at edge of each axis used to calculate the statistic value. ((before_1, after_1), \u2026 (before_N, after_N)) unique statistic lengths for each axis. ((before, after),) yields same before and after statistic lengths for each axis. (stat_length,) or int is a shortcut for before = after = statistic length for all axes. Default is None, to use the entire axis. "
        },
        "constant_values": {
            "type": "sequence or scalar, optional",
            "description": "Used in \u2018constant\u2019.  The values to set the padded values for each axis. ((before_1, after_1), ... (before_N, after_N)) unique pad constants for each axis. ((before, after),) yields same before and after constants for each axis. (constant,) or constant is a shortcut for before = after = constant for all axes. Default is 0. "
        },
        "end_values": {
            "type": "sequence or scalar, optional",
            "description": "Used in \u2018linear_ramp\u2019.  The values used for the ending value of the linear_ramp and that will form the edge of the padded array. ((before_1, after_1), ... (before_N, after_N)) unique end values for each axis. ((before, after),) yields same before and after end values for each axis. (constant,) or constant is a shortcut for before = after = constant for all axes. Default is 0. "
        },
        "reflect_type": {
            "type": "{\u2018even\u2019, \u2018odd\u2019}, optional",
            "description": "Used in \u2018reflect\u2019, and \u2018symmetric\u2019.  The \u2018even\u2019 style is the default with an unaltered reflection around the edge value.  For the \u2018odd\u2019 style, the extended part of the array is created by subtracting the reflected values from two times the edge value. "
        }
    },
    "return": {
        "pad": {
            "type": "ndarray",
            "description": "Padded array of rank equal to array with shape increased according to pad_width. "
        }
    },
    "note": "For an array with rank greater than 1, some of the padding of later axes is calculated from padding of previous axes.  This is easiest to think about with a rank 2 array where the corners of the padded array are calculated by using padded values from the first axis. '"
}