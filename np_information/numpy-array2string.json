{
    "overall": {
        "api_name": "array2string",
        "description": "Return a string representation of an array."
    },
    "parameter": {
        "a": {
            "type": "array_like",
            "description": "Input array. "
        },
        "max_line_width": {
            "type": "int, optional",
            "description": "Inserts newlines if text is longer than max_line_width. Defaults to numpy.get_printoptions()['linewidth']. "
        },
        "precision": {
            "type": "int or None, optional",
            "description": "Floating point precision. Defaults to numpy.get_printoptions()['precision']. "
        },
        "suppress_small": {
            "type": "bool, optional",
            "description": "Represent numbers \u201cvery close\u201d to zero as zero; default is False. Very close is defined by precision: if the precision is 8, e.g., numbers smaller (in absolute value) than 5e-9 are represented as zero. Defaults to numpy.get_printoptions()['suppress']. "
        },
        "separator": {
            "type": "str, optional",
            "description": "Inserted between elements. "
        },
        "prefix": {
            "type": "str, optional",
            "description": ""
        },
        "suffix: str, optional": {
            "type": "_NoValue, optional",
            "description": "The length of the prefix and suffix strings are used to respectively align and wrap the output. An array is typically printed as: prefix + array2string(a) + suffix   The output is left-padded by the length of the prefix string, and wrapping is forced at the column max_line_width - len(suffix). It should be noted that the content of prefix and suffix strings are not included in the output. "
        },
        "style": {
            "type": "_NoValue, optional",
            "description": "Has no effect, do not use.  Deprecated since version 1.14.0.  "
        },
        "formatter": {
            "type": "dict of callables, optional",
            "description": "If not None, the keys should indicate the type(s) that the respective formatting function applies to.  Callables should return a string. Types that are not specified (by their corresponding keys) are handled by the default formatters.  Individual types for which a formatter can be set are:  \u2018bool\u2019 \u2018int\u2019 \u2018timedelta\u2019 : a numpy.timedelta64 \u2018datetime\u2019 : a numpy.datetime64 \u2018float\u2019 \u2018longfloat\u2019 : 128-bit floats \u2018complexfloat\u2019 \u2018longcomplexfloat\u2019 : composed of two 128-bit floats \u2018void\u2019 : type numpy.void \u2018numpystr\u2019 : types numpy.string_ and numpy.unicode_ \u2018str\u2019 : all other strings  Other keys that can be used to set a group of types at once are:  \u2018all\u2019 : sets all types \u2018int_kind\u2019 : sets \u2018int\u2019 \u2018float_kind\u2019 : sets \u2018float\u2019 and \u2018longfloat\u2019 \u2018complex_kind\u2019 : sets \u2018complexfloat\u2019 and \u2018longcomplexfloat\u2019 \u2018str_kind\u2019 : sets \u2018str\u2019 and \u2018numpystr\u2019  "
        },
        "threshold": {
            "type": "int, optional",
            "description": "Total number of array elements which trigger summarization rather than full repr. Defaults to numpy.get_printoptions()['threshold']. "
        },
        "edgeitems": {
            "type": "int, optional",
            "description": "Number of array items in summary at beginning and end of each dimension. Defaults to numpy.get_printoptions()['edgeitems']. "
        },
        "sign": {
            "type": "string, either \u2018-\u2018, \u2018+\u2019, or \u2018 \u2018, optional",
            "description": "Controls printing of the sign of floating-point types. If \u2018+\u2019, always print the sign of positive values. If \u2018 \u2018, always prints a space (whitespace character) in the sign position of positive values.  If \u2018-\u2018, omit the sign character of positive values. Defaults to numpy.get_printoptions()['sign']. "
        },
        "floatmode": {
            "type": "str, optional",
            "description": "Controls the interpretation of the precision option for floating-point types. Defaults to numpy.get_printoptions()['floatmode']. Can take the following values:  \u2018fixed\u2019: Always print exactly precision fractional digits, even if this would print more or fewer digits than necessary to specify the value uniquely. \u2018unique\u2019: Print the minimum number of fractional digits necessary to represent each value uniquely. Different elements may have a different number of digits.  The value of the precision option is ignored. \u2018maxprec\u2019: Print at most precision fractional digits, but if an element can be uniquely represented with fewer digits only print it with that many. \u2018maxprec_equal\u2019: Print at most precision fractional digits, but if every element in the array can be uniquely represented with an equal number of fewer digits, use that many digits for all elements.  "
        },
        "legacy": {
            "type": null,
            "description": "If set to the string \u20181.13\u2019 enables 1.13 legacy printing mode. This approximates numpy 1.13 print output by including a space in the sign position of floats and different behavior for 0d arrays. If set to False, disables legacy mode. Unrecognized strings will be ignored with a warning for forward compatibility.  New in version 1.14.0.  "
        }
    },
    "return": {
        "array_str": {
            "type": "str",
            "description": "String representation of the array. "
        }
    },
    "note": "If a formatter is specified for a certain type, the precision keyword is ignored for that type. '"
}