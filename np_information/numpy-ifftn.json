{
    "overall": {
        "api_name": "ifftn",
        "description": "Compute the N-dimensional inverse discrete Fourier Transform."
    },
    "parameter": {
        "a": {
            "type": "array_like",
            "description": "Input array, can be complex. "
        },
        "s": {
            "type": "sequence of ints, optional",
            "description": "Shape (length of each transformed axis) of the output (s[0] refers to axis 0, s[1] to axis 1, etc.). This corresponds to n for ifft(x, n). Along any axis, if the given shape is smaller than that of the input, the input is cropped.  If it is larger, the input is padded with zeros. if s is not given, the shape of the input along the axes specified by axes is used.  See notes for issue on ifft zero padding. "
        },
        "axes": {
            "type": "sequence of ints, optional",
            "description": "Axes over which to compute the IFFT.  If not given, the last len(s) axes are used, or all axes if s is also not specified. Repeated indices in axes means that the inverse transform over that axis is performed multiple times. "
        },
        "norm": {
            "type": "{None, \u201cortho\u201d}, optional",
            "description": " New in version 1.10.0.  Normalization mode (see numpy.fft). Default is None. "
        }
    },
    "return": {
        "out": {
            "type": "complex ndarray",
            "description": "The truncated or zero-padded input, transformed along the axes indicated by axes, or by a combination of s or a, as explained in the parameters section above. "
        }
    }
}