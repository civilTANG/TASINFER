{
    "overall": {
        "api_name": "format_float_scientific",
        "description": "Format a floating-point scalar as a decimal string in scientific notation."
    },
    "parameter": {
        "x": {
            "type": "python float or numpy floating scalar",
            "description": "Value to format. "
        },
        "precision": {
            "type": "non-negative integer or None, optional",
            "description": "Maximum number of digits to print. May be None if unique is True, but must be an integer if unique is False. "
        },
        "unique": {
            "type": "boolean, optional",
            "description": "If True, use a digit-generation strategy which gives the shortest representation which uniquely identifies the floating-point number from other values of the same type, by judicious rounding. If precision was omitted, print all necessary digits, otherwise digit generation is cut off after precision digits and the remaining value is rounded. If False, digits are generated as if printing an infinite-precision value and stopping after precision digits, rounding the remaining value. "
        },
        "trim": {
            "type": "one of \u2018k\u2019, \u2018.\u2019, \u20180\u2019, \u2018-\u2018, optional",
            "description": "Controls post-processing trimming of trailing digits, as follows:  \u2018k\u2019 : keep trailing zeros, keep decimal point (no trimming) \u2018.\u2019 : trim all trailing zeros, leave decimal point \u20180\u2019 : trim all but the zero before the decimal point. Insert the zero if it is missing. \u2018-\u2018 : trim trailing zeros and any trailing decimal point  "
        },
        "sign": {
            "type": "boolean, optional",
            "description": "Whether to show the sign for positive values. "
        },
        "pad_left": {
            "type": "non-negative integer, optional",
            "description": "Pad the left side of the string with whitespace until at least that many characters are to the left of the decimal point. "
        },
        "exp_digits": {
            "type": "non-negative integer, optional",
            "description": "Pad the exponent with zeros until it contains at least this many digits. If omitted, the exponent will be at least 2 digits. "
        }
    },
    "return": {
        "rep": {
            "type": "string",
            "description": "The string representation of the floating point value "
        }
    },
    "note": "Examples '"
}