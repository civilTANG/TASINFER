{
    "overall": {
        "api_name": "in1d",
        "description": "Test whether each element of a 1-D array is also present in a second array."
    },
    "parameter": {
        "ar1": {
            "type": "(M,) array_like",
            "description": "Input array. "
        },
        "ar2": {
            "type": "array_like",
            "description": "The values against which to test each value of ar1. "
        },
        "assume_unique": {
            "type": "bool, optional",
            "description": "If True, the input arrays are both assumed to be unique, which can speed up the calculation.  Default is False. "
        },
        "invert": {
            "type": "bool, optional",
            "description": "If True, the values in the returned array are inverted (that is, False where an element of ar1 is in ar2 and True otherwise). Default is False. np.in1d(a, b, invert=True) is equivalent to (but is faster than) np.invert(in1d(a, b)).  New in version 1.8.0.  "
        }
    },
    "return": {
        "in1d": {
            "type": "(M,) ndarray, bool",
            "description": "The values ar1[in1d] are in ar2. "
        }
    },
    "note": "We recommend using isin instead of in1d for new code. '"
}