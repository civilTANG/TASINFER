{
    "overall": {
        "api_name": "seterr",
        "description": "Set how floating-point errors are handled."
    },
    "parameter": {
        "all": {
            "type": "{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optional",
            "description": "Set treatment for all types of floating-point errors at once:  ignore: Take no action when the exception occurs. warn: Print a RuntimeWarning (via the Python warnings module). raise: Raise a FloatingPointError. call: Call a function specified using the seterrcall function. print: Print a warning directly to stdout. log: Record error in a Log object specified by seterrcall.  The default is not to change the current behavior. "
        },
        "divide": {
            "type": "{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optional",
            "description": "Treatment for division by zero. "
        },
        "over": {
            "type": "{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optional",
            "description": "Treatment for floating-point overflow. "
        },
        "under": {
            "type": "{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optional",
            "description": "Treatment for floating-point underflow. "
        },
        "invalid": {
            "type": "{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optional",
            "description": "Treatment for invalid floating-point operation. "
        }
    },
    "return": {
        "old_settings": {
            "type": "dict",
            "description": "Dictionary containing the old settings. "
        }
    },
    "note": "Notes '"
}